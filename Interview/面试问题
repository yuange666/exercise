1.说一说你对 JS 执行上下文栈和作用域链的理解？
    执行上下文栈又叫调用栈,具有后进先出的特点,用处存储js执行过程中创建的所有执行上下文。
首次运行js，将会创建一个全局执行上下文并push到当前栈的栈顶，每发生一次函数调用，就会创建一个函数执行上下文并push到当前栈的栈顶，
当栈顶的函数调用结束后，其对应的函数执行上下文就会从栈顶pop出，此时上下文的控制权移交到当前栈的下一个。
    从当前作用域开始向上一层地一层地寻找某个变量，一直到全局作用域都找不到就放弃,这样一层一层的关系就是作用域链
2.js在浏览器中的执行机制?
    js是一门单线程的语言，它执行的任务分为同步任务和异步任务，先依次执行完同步任务,然后执行异步任务，异步任务总体分为两类，
    宏任务和微任务。
宏任务(setTimeout,整个script,I/O)，微任务（promise）,微任务执行优先级高于宏任务，如此重复执行，形成事件循环(event loop);
3.闭包是什么？闭包的作用？
    有权访问另一个函数作用域中变量的函数。
    作用：1.能够访问其定义时所在的词法作用域(变量常驻在内存中)。
          2.私有化变量
          3.模拟块状作用域
4.CDN的理解？
    内容分发网络，是构建在现有的网络上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡，分发，调度等模块，
    使用户就近访问网络，降低网络拥堵，减轻源服务器的压力，提高网站访问速度。
5.可迭代对象有什么特点？
    1.具有Symbol.iterator属性，Symbol.iterator()返回遍历器对象
    2.可以用for ... of ..遍历
    3.可以用Array.from转为数组
6.websocket怎么区别是正常关闭的还是异常断开的？
    websocket onclose里面有一个事件对象参数，它有code，reason，isClean属性，code有各种状态码代表当前连接状态，
    如1006就代表是因为网络原因导致。isclean属性如果是false代表异常断开
7.vue与react的区别？相似点？
    1.vue使用的是HTML模板语法(在技术上也支持render函数,jsx语法，不是默认的)，而react使用的是JSX语法,因此vue熟悉和上手更快。
    2.变更状态的方式，react只要通过setState方法，不能直接变更state（强调数据的不可变性），而vue数据管理直接在data属性里面（数据可变）。
    相似点：
    1.virtual-dom（操作一个js对象开销远小于直接操作dom，运用diff算法进行高效视图更新）。
    2.组件化开发。
    3.父子组件通信靠props，并且都是单向数据流。
8.generator函数的理解？
    一个状态机，内部封装了多个状态。通过next方法去访问下一个内部状态，
    与普通函数相比，它也是一种可以暂停执行和恢复执行的函数，yield就是暂停标记。
    普通函数只能返回一个值，因为只能执行一次return，而generator函数可以生成一系列的值，因为可以有多个yield语句。
9.异步编程解决方案：按次序出现，
    传统回调(回调地狱)，
    setTimeout,
    promise(虽解决了回调地狱，但代码冗余，语义不够清楚)，
    generator(像同步代码一样去写异步代码)，
    async函数(generator函数的语法糖)
10.js函数式编程？
    它鼓励使用不可变的数据结构和纯函数编程，它既不依赖外部状态也不会去修改外部状态，使代码更加容易理解，维护，和测试。
    有几个特性：
    1.无副作用
    2.不可变数据结构(immutable)
    3.纯函数(函数的输出只依赖于输入，相同的输入一定是相同的输出)
    4.函数组合(函数的参数是另外一个函数)
    5.函数柯里化。（将有多个参数的函数转为一个参数）。
11.nginx正向代理和反向代理的区别？
    正向代理需要客户端进行设置，客户端发送请求到代理服务器上，由代理服务器进行转发到真实服务器上。
    而反向代理不需要客户端进行设置，由服务端进行重定向到真实服务器，也就是真实服务器对于客户端来说不可见。
12.vue里父组件与子组件的生命周期谁先发生？
    子组件。
13.vue里mixins与extends区别？
   1.接受参数的类型不同,mixins是数组，extends是一个对象或者构造函数。
   2.允许声明扩展另一个组件(可以是一个简单的选项对象或构造函数)，而无需使用 Vue.extend。这主要是为了便于扩展单文件组件。
